#!/usr/bin/python3

# Fuzz - Web Fuzzer by 0bfxgh0st*

import requests, sys, time

ColMag="\033[0;32m"
ColPur="\033[0;35m"
ColRed="\033[0;31m"
ColEnd="\033[0m"
ColM="\033[5;32m"

sc=''
hc=''
sh=''
hh=''
sw=''
hw=''
sl=''
hl=''
color_status=False

def Help():

	print ('Usage fuzz -u <url> -w <wordlist>\n')
	print ('Options:\n')
	print ('      -u                        : Specify a URL for the request')
	print ('      -w                        : Specify a wordlist file')
	print ('      -c                        : Colored output')
	print ('      --hc/hl/hw/hh N[,N]+      : Hide responses with the specified code/lines/words/chars')
	print ('      --sc/sl/sw/sh N[,N]+      : Show responses with the specified code/lines/words/chars\n')
	print ('Example: \n')
	print ('      fuzz -c -u http://ghost.server/FUZZ -w /usr/share/wordlists/dirb/common.txt --sc=200,403,500')

if len(sys.argv) < 5:

	Help()
	sys.exit(1)

headers = {

    'User-Agent': '--'
}

def ParseArgs():

	parser = []
	for arg in sys.argv:
		parser.append(arg)
	
		if '-u' in arg or '--url' in arg:

			urlp = int(parser.index(arg)+1)

		if '-w' in arg or '--wordlist' in arg:
	
			wordlistp = int(parser.index(arg)+1)
			
		if '-c' in arg:
			global color_status
			color_status = True	
			
		if '--sc=' in arg:
	
			global sc
			sc = (arg.split("=")[1]).split(',')

		if '--hc=' in arg:
	
			global hc
			hc = (arg.split("=")[1]).split(',')
			counter = 0
			for code in hc:
				hc[counter] = int(code)
				counter += 1
					
		if '--sh=' in arg:
	
			global sh
			sh = (arg.split("=")[1]).split(',')
			
			
		if '--hh=' in arg:
	
			global hh
			hh = (arg.split("=")[1]).split(',')
			counter = 0
			for chars in hh:
				hh[counter] = int(chars)
				counter += 1
		
		if '--sw=' in arg:
	
			global sw
			sw = (arg.split("=")[1]).split(',')
			
		if '--hw=' in arg:
			
			global hw
			hw = (arg.split("=")[1]).split(',')
			counter = 0
			for wds in hw:
				hw[counter] = int(wds)
				counter += 1

		if '--sl=' in arg:
		
			global sl
			sl = (arg.split("=")[1]).split(',')
			
		if '--hl=' in arg:
		
			global hl
			hl = (arg.split("=")[1]).split(',')
			counter = 0
			for lns in hl:
				hl[counter] = int(lns)
				counter += 1		

	global url
	global wordlist
	url = parser[urlp]
	wordlist = parser[wordlistp]

def wtl():

	with open(wordlist,'rb') as f:
		global total
		total = 0
		for lines in f:

			if b'\n' in lines:
				total += 1
				
def URLPayload():

	if not 'FUZZ' in url:

		print ('Error: FUZZ parameter not found in URL')
		print ('Usage fuzz -u http://ghost.server/FUZZ -w /usr/share/wordlists/dirb/common.txt')
		sys.exit(1)

ParseArgs()
URLPayload()

try:

	requests.get(url, headers=headers)

except requests.exceptions.ConnectionError:

	print ('[Errno 111] Connection refused')
	sys.exit(1)

header = ColMag + r'''
   ___                           
 /'___\                          
/\ \__/  __  __  ____    ____  ''' + ColEnd + r'''   by 0bfxgh0st''' + ColM + r'''*''' + ColEnd + ColMag + r'''
\ \ ,__\/\ \/\ \/\_ ,`\ /\_ ,`\ ''' + ColEnd + r'''  && D3Ext''' + ColMag + r'''
 \ \ \_/\ \ \_\ \/_/  /_\/_/  /_ 
  \ \_\  \ \____/ /\____\ /\____\
   \/_/   \/___/  \/____/ \/____/  
   
''' + ColEnd

print (header)

bar = '''
============================================================================
ID           Response        Lines       Words      Chars           Payload
============================================================================
'''

wtl()

print ('Target: ' + url)
print ('Total requests: ' + str(total))
print (bar)

def main():

	start = time.time()

	ID = 0
	lines = 0
	words = 0

	with open(wordlist,'r',encoding='latin-1') as f:

		for payload in f:

			ID += 1
			r = requests.get(url.replace('FUZZ',payload.strip()), headers=headers)
			
			for i in r.text:

				if i == "\n":
					lines += 1

			content = r.text
			words = content.split()
			
			oid = f"{str(ID):<15}"
			osc = f"{str(r.status_code):<15}"
			oln = f"{str(lines):<12}"
			owd = f"{str(len(words)):<11}"
			och = f"{str(len(r.text)):<15}"
			opy = '"' + f"{str(payload).strip()}" + '"'
			
			result = oid + osc + oln + owd + och + opy
			
			if len(sys.argv) == 5 or len(sys.argv) == 6 and '-c' in sys.argv:
				
				if color_status == True:
				
					if r.status_code >= 200 and r.status_code < 300:
						result = result.replace(osc, ColMag + osc + ColEnd)
					if r.status_code >= 500:
						result = result.replace(osc, ColPur + osc + ColEnd)
					if r.status_code >= 400 and r.status_code < 500:
						result = result.replace(osc, ColRed + osc + ColEnd)
				print (result)

			for code in sc:

				if r.status_code == int(code):
					
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
					
			if len(hc) > 0:	
				
				if r.status_code not in hc:
					
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
					
					
			for chars in sh:
			
				if int(len(r.text)) == int(chars):
					
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
					
					
			if len(hh) > 0:
			
				if len(r.text) not in hh:
					
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
				
			
			for wds in sw:
			
				if int(len(words)) == int(wds):
					
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)	
					
			if len(hw) > 0:
			
				if len(words) not in hw:
		
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
			
			for lns in sl:
			
				if int(lines) == int(lns):
			
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
			
			if len(hl) > 0:
	
				if int(lines) not in hl:
	
					if color_status == True:
					
						if r.status_code >= 200 and r.status_code < 300:
							result = result.replace(osc, ColMag + osc + ColEnd)
						if r.status_code >= 500:
							result = result.replace(osc, ColPur + osc + ColEnd)
						if r.status_code >= 400 and r.status_code < 500:
							result = result.replace(osc, ColRed + osc + ColEnd)
					print (result)
			
			lines = 0
			words = 0
			
		end = time.time()
		total_time = end - start
		print ('\nTotal time: ' + str(total_time))

main()
